import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode, Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from flask_back import keep_alive
from model_user import UserProfile
from model_tariffs import tariffs
import sqlite3 


# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
conn = sqlite3.connect('user_profile.db')
cursor = conn.cursor()

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ
async def create_table(table_name, user_id):
  table_name = "table_" + str(user_id) 
  cursor.execute(f'''CREATE TABLE IF NOT EXISTS {table_name}
  (user_id INTEGER PRIMARY KEY,
  U_GADGET INTEGER,
  ONNET_MIN INTEGER,
  ONNET_MAX INTEGER,
  OFFNET_MIN INTEGER,
  OFFNET_MAX INTEGER,
  DATA_MIN INTEGER,
  DATA_MAX INTEGER,
  ROAMING INTEGER,
  INTNET INTEGER,
  FAMILY INTEGER,
  SMS INTEGER,
  SOCIAL INTEGER,
  EDUCATIONAL INTEGER,
  TV INTEGER,
  LIFEBOX INTEGER,
  NUMBER_TYPE TEXT,
  PRICE_MIN INTEGER,
  PRICE_MAX INTEGER
    )
''')
conn.commit()

log = logging.basicConfig(filename="Botlogs.log", level=logging.INFO, format="%(asctime)s %(message)s", datefmt="%m/%d/%Y %I:%M:%S %p %Z")

bottoken = os.getenv("bot_token")
bot = Bot(token=bottoken)
dp = Dispatcher(bot)

admin_id = 1300417787



class TariffState(StatesGroup):
    SELECT_TARIFF = State()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text="–ü—Ä–∏–≤—ñ—Çüëã")
    await bot.send_message(chat_id=message.from_user.id, text="–Ø —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç - –ø–æ–º—ñ—á–Ω–∏–∫ –∫–æ–º–ø–∞–Ω—ñ—ó Lifecell")
   # Inline –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∞ –∑ –∫–Ω–æ–ø–∫–æ—é "–ü—ñ–¥—ñ–±—Ä–∞—Ç–∏"
    keyboard = InlineKeyboardMarkup()
    button_p = InlineKeyboardButton(text="–ü—ñ–¥—ñ–±—Ä–∞—Ç–∏", callback_data="select_category")
    keyboard.row(button_p)
  
    await bot.send_message(chat_id=message.from_user.id, text="–Ø –¥–æ–ø–æ–º–æ–∂—É –≤–∞–º –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –≤–∏–≥—ñ–¥–Ω–∏–π —Ç–∞—Ä–∏—Ñ", reply_markup=keyboard)



@dp.callback_query_handler(text="select_category")
async def select_category_callback(query: types.CallbackQuery):
  await query.answer(cache_time=1) 

   
  keyboard = InlineKeyboardMarkup()
  button_private = InlineKeyboardButton(text="–ü—Ä–∏–≤–∞—Ç–Ω–∏–º –∫–ª—ñ—î–Ω—Ç–∞–º", callback_data="private_clients")
  button_business = InlineKeyboardButton(text="–ë—ñ–∑–Ω–µ—Å", callback_data="business")
  keyboard.row(button_private, button_business)

  await query.message.answer("1. –û–±–µ—Ä—ñ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:", reply_markup=keyboard)


@dp.callback_query_handler(text="private_clients")
async def private_clients_callback(query: types.CallbackQuery):
  await query.answer(cache_time=1) 
  
  keyboard = InlineKeyboardMarkup()
  button_start_poll = InlineKeyboardButton(text="—Ç–∞–∫", callback_data="start_poll")
  button_show_list = InlineKeyboardButton(text="–ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ", callback_data="show_all")
  keyboard.row(button_start_poll, button_show_list)
  await query.message.answer("2. –ë–∞–∂–∞—î—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è –∑–∞–¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó?", reply_markup=keyboard)


@dp.callback_query_handler(text="start_poll")
async def start_poll_callback(query: types.CallbackQuery):
  await query.answer(cache_time=1) 
  user_id = int(query.from_user.id)
  table_name = "table_" + str(user_id)
  await create_table(table_name,user_id)
  cursor.execute(f"INSERT INTO {table_name} (user_id) VALUES (?)", (user_id,))
  conn.commit()
  
  keyboard = InlineKeyboardMarkup()
  button_gadget0 = InlineKeyboardButton(text="—Å–º–∞—Ä—Ç—Ñ–æ–Ω", callback_data="gadget0")
  button_gadget1 = InlineKeyboardButton(text="–¥–∞—Ç—á–∏–∫", callback_data="gadget1")
  button_gadget2 = InlineKeyboardButton(text="—Å–º–∞—Ä—Ç–≥–æ–¥–∏–Ω–Ω–∏–∫",
                                        callback_data="gadget2")
  button_gadget3 = InlineKeyboardButton(text="–ø–ª–∞–Ω—à–µ—Ç", callback_data="gadget3")
  button_gadget4 = InlineKeyboardButton(text="—Ä–æ—É—Ç–µ—Ä", callback_data="gadget4")
  keyboard.row(button_gadget0)
  keyboard.row(button_gadget1)
  keyboard.row(button_gadget2)
  keyboard.row(button_gadget3)
  keyboard.row(button_gadget4)
  await query.message.answer("3. –û–±–µ—Ä—ñ—Ç—å –≤–∞—à –ø—Ä–∏—Å—Ç—Ä—ñ–π", reply_markup=keyboard)






@dp.callback_query_handler(lambda query: query.data.startswith('gadget'))
async def handle_gadget_selection(query: types.CallbackQuery):
  await query.answer(cache_time=1)
  user_id = query.from_user.id
  U_GADGET  = int(query.data[len('gadget'):])
  table_name = "table_" + str(user_id)
  cursor.execute(f"INSERT INTO {table_name} (U_GADGET) VALUES (?)", (U_GADGET,))
  conn.commit()
  await query.message.answer(f"–í–∏ –æ–±—Ä–∞–ª–∏ –≥–∞–¥–∂–µ—Ç {U_GADGET}")
  if U_GADGET==1:
    R_TARIFF = tariffs[9]
    message_text = (
            f"–í–∞–º –ø—ñ–¥—ñ–π–¥–µ —Ç–∞—Ä–∏—Ñ *{R_TARIFF.NAME}* \n"
            f"–î–∑–≤—ñ–Ω–∫–∏ –Ω–∞ lifecell: {R_TARIFF.ONNET} —Ö–≤/–Ω–∞ –¥–µ–Ω—å \n"
            f"–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: {R_TARIFF.DATA} –ú–ë/–Ω–∞ –¥–µ–Ω—å \n"
            f"SMS: {R_TARIFF.SMS} /–Ω–∞ –¥–µ–Ω—å \n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å: {R_TARIFF.PRICE_ST} –≥—Ä–Ω/12 —Ç–∏–∂–Ω—ñ–≤\n"
        )
    await query.message.answer(message_text, parse_mode=ParseMode.MARKDOWN)
      
    await query.message.answer("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ —ñ n—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ"
      f"{R_TARIFF.LINK}")


  if U_GADGET == 2:
    R_TARIFF = tariffs[10]
    message_text = (
            f"–í–∞–º –ø—ñ–¥—ñ–π–¥–µ —Ç–∞—Ä–∏—Ñ *{R_TARIFF.NAME}* \n"
            f"–î–∑–≤—ñ–Ω–∫–∏ –Ω–∞ lifecell: {R_TARIFF.ONNET} —Ö–≤/–Ω–∞ –¥–µ–Ω—å \n"
            f"–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: {R_TARIFF.DATA} –ú–ë/–Ω–∞ –¥–µ–Ω—å \n"
            f"SMS: {R_TARIFF.SMS} /–Ω–∞ –¥–µ–Ω—å \n"
            "–ë–ï–∑–ª—ñ–º—ñ—Ç –Ω–∞ –æ—Å–≤—ñ—Ç–Ω—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏ \n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å: {R_TARIFF.PRICE_ST} –≥—Ä–Ω/4 —Ç–∏–∂–Ω—ñ\n"
        )
    await query.message.answer(message_text, parse_mode=ParseMode.MARKDOWN)
    await query.message.answer("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ —ñ n—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ\n"
      f"{R_TARIFF.LINK}")

  if U_GADGET==3:
    R_TARIFF = tariffs[11]
    message_text = (
            f"–í–∞–º –ø—ñ–¥—ñ–π–¥–µ —Ç–∞—Ä–∏—Ñ *{R_TARIFF.NAME}* \n"
            f"–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: {R_TARIFF.DATA} –ì–ë \n"
            " –ë–µ–∑–ª—ñ–º –Ω–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ —Ç–∞ –æ—Å–≤—ñ—Ç–Ω—ñ –ø–ª–ª–∞—Ç—Ñ–æ—Ä–º–∏ \n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å: {R_TARIFF.PRICE_ST} –≥—Ä–Ω/4 —Ç–∏–∂–Ω—ñ\n"
        )
    await query.message.answer(message_text, parse_mode=ParseMode.MARKDOWN)
    await query.message.answer("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ —ñ n—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ \n"
      f"{R_TARIFF.LINK}")
    
  if U_GADGET==4:
    R_TARIFF = tariffs[12]
    message_text = (
            f"–í–∞–º –ø—ñ–¥—ñ–π–¥–µ —Ç–∞—Ä–∏—Ñ *{R_TARIFF.NAME}* \n"
            f"–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç: –ë–µ–∑–ª—ñ–º—ñ—Ç\n"
            " –ë–µ–∑–ª—ñ–º—ñ—Ç –Ω–∞ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ –º–µ—Ä–µ–∂—ñ, –º–µ–º—Å–µ–Ω–¥–∂–µ—Ä–∏ –π –æ—Å–≤—ñ—Ç–Ω—ñ –ø–ª–ª–∞—Ç—Ñ–æ—Ä–º–∏ \n"
            f"–í–∞—Ä—Ç—ñ—Å—Ç—å: {R_TARIFF.PRICE_ST} –≥—Ä–Ω/4 —Ç–∏–∂–Ω—ñ\n"
        )
    await query.message.answer(message_text, parse_mode=ParseMode.MARKDOWN)
    await query.message.answer("–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ —ñ n—ñ–¥–∫–ª—é—á–∏—Ç–∏ —Ç–∞—Ä–∏—Ñ \n"
      f"{R_TARIFF.LINK}")

  if U_GADGET==0:
    keyboard = InlineKeyboardMarkup()
    button_net_option1 = InlineKeyboardMarkup(text = "–¥—É–∂–µ —Ä—ñ–¥–∫–æ(–¥–æ 500)",callback_data="500" )
    button_net_option2 = InlineKeyboardButton(text="–ì–æ–≤–æ—Ä—é –ø–æ –ø–æ—Ç—Ä–µ–±—ñ (600 - 1000)", callback_data="1000")
    button_net_option3 = InlineKeyboardButton(text="–ß–∞—Å—Ç–æ –∑–∞–≥–æ–≤–æ—Ä—é—é—Å—å (1000 - 2000)", callback_data="2000")
    button_net_option4 = InlineKeyboardButton(text="–ó–∞–≤–∂–¥–∏ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ (–ø–æ–Ω–∞–¥ 2000)", callback_data="100000")
      
    keyboard.add(button_net_option1)
    keyboard.add(button_net_option2)
    keyboard.add(button_net_option3)
    keyboard.add(button_net_option4)
    await query.message.answer("4. –Ø–∫ —á–∞—Å—Ç–æ –≤–∏ —Å–ø—ñ–ª–∫—É—î—Ç–µ—Å—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É?\n"
                               "(–≤ —Å–µ—Ä–µ–¥–Ω—å–æ–º—É —Ö–≤/–º—ñ—Å—è—Ü—å)", reply_markup=keyboard)


    @dp.callback_query_handler(lambda query: query.data in ["500", "1000", "2000", "100000"])
    async def handle_phone_frequency(query: types.CallbackQuery):
      await query.answer(cache_time=1)
      user_id = query.from_user.id
      frequence_mapping = {
    "500": {"ONNET_MIN": 0, "ONNET_MAX": 500},
    "1000": {"ONNET_MIN": 600, "ONNET_MAX": 1000},
    "2000": {"ONNET_MIN": 1000, "ONNET_MAX": 2000},
    "100000": {"ONNET_MIN": 2000, "ONNET_MAX": 100000}
      }
      table_name = "table_" + str(user_id)
      data = query.data
      
      values = frequence_mapping[data]
      ONNET_MIN = values["ONNET_MIN"]
      ONNET_MAX = values["ONNET_MAX"]
      cursor.execute(f"INSERT INTO {table_name} (ONNET_MIN) VALUES (?)", (ONNET_MIN,))
      cursor.execute(f"INSERT INTO {table_name} (ONNET_MAX) VALUES (?)", (ONNET_MAX,))
      conn.commit() 
      
      
      keyboard = InlineKeyboardMarkup()
      button_offnet_option1 = InlineKeyboardMarkup(text = "–º–æ—ó –ª—é–¥–∏ –Ω–∞ –ª–∞–π—Ñ—ñ)",callback_data="100" )
      button_offnet_option2 = InlineKeyboardButton(text="50/50", callback_data="550")
      button_offnet_option3 = InlineKeyboardButton(text="–º–∞–π–∂–µ –≤—Å—ñ –Ω–∞ —ñ–Ω—à—ñ(", callback_data="1000")
      keyboard.add(button_offnet_option1)
      keyboard.add(button_offnet_option2)
      keyboard.add(button_offnet_option3)
      
      await query.message.answer("5.–Ø–∫ –±–∞–≥–∞—Ç–æ –¥–∑–≤—ñ–Ω–∫—ñ–≤ –ø—Ä–∏–ø–∞–¥–∞—î –Ω–∞ —ñ–Ω—à—ñ –º–µ—Ä–µ–∂—ñ?", reply_markup=keyboard)
      @dp.callback_query_handler(lambda query: query.data in ["100", "550", "1000"])
      async def handle_offnet_frequency(query: types.CallbackQuery):
        await query.answer(cache_time=1)
        user_id = query.from_user.id
        offnet_frequence_mapping = {
    "100": {"OFFNET_MIN": 0, "OFFNET_MAX": 100},
    "550": {"OFFNET_MIN": 101, "OFFNET_MAX": 1000},
    "1000": {"OFFNET_MIN": 1001, "OFFNET_MAX": 2000}
        }
        table_name = "table_" + str(user_id)
        data = query.data
        
        values = offnet_frequence_mapping[data]
        OFFNET_MIN = values["OFFNET_MIN"]
        OFFNET_MAX = values["OFFNET_MAX"]
        cursor.execute(f"INSERT INTO {table_name} (OFFNET_MIN) VALUES (?)", (OFFNET_MIN,))
        cursor.execute(f"INSERT INTO {table_name} (OFFNET_MAX) VALUES (?)", (OFFNET_MAX,))
        conn.commit()
        
        keyboard = InlineKeyboardMarkup()
        button_roaming_option1 = InlineKeyboardMarkup(text = "–¥—É–∂–µ —á–∞—Å—Ç–æ",callback_data="1" )
        button_roaming_option2 = InlineKeyboardButton(text="—á–∞—Å –≤—ñ–¥ —á–∞—Å—É ", callback_data="1")
        button_roaming_option3 = InlineKeyboardButton(text="—Ä—ñ–¥–∫–æ", callback_data="0")
        button_roaming_option4 = InlineKeyboardButton(text="–Ω—ñ–∫–æ–ª–∏", callback_data="0")
        keyboard.add(button_roaming_option1)
        keyboard.add(button_roaming_option2)
        keyboard.add(button_roaming_option3)
        keyboard.add(button_roaming_option4)
        await query.message.answer("6.–ù–∞—Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—Ç–æ –≤–∏ –ø–æ–¥–æ—Ä–æ–∂—É—î—Ç–µ –∑–∞ –∫–æ—Ä–¥–æ–Ω?", reply_markup=keyboard)
        
        @dp.callback_query_handler(lambda query: query.data in ["1", "1"," 0", "0"])
        async def handle_roaming(query: types.CallbackQuery):
          await query.answer(cache_time=1)
          user_id = query.from_user.id
          table_name = "table_" + str(user_id)
          ROAMING = query.data
          cursor.execute(f"INSERT INTO {table_name} (ROAMING) VALUES (?)", (ROAMING,))
          conn.commit() 
          
          await query.message.answer("–π–¥–µ–º–æ –¥–∞–ª—ñ")
          
          keyboard = InlineKeyboardMarkup()
          button_data_option1 = InlineKeyboardMarkup(text = "–º–∞–ª–æ(–¥–æ 10 –ì–ë)",callback_data="11" )
          button_data_option2 = InlineKeyboardButton(text="–ø–æ-—Å–µ—Ä–µ–¥–Ω—å–æ (10-25–ì–ë)", callback_data="25")
          button_data_option3 = InlineKeyboardButton(text="–±–∞–≥–∞—Ç–æ(25+)", callback_data="100")
          keyboard.add(button_data_option1)
          keyboard.add(button_data_option2)
          keyboard.add(button_data_option3)
          
          await query.message.answer("7.–°–∫—ñ–ª—å–∫–∏ –º–æ–±—ñ–ª—å–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤–∏ –≤–∏—Ç—Ä–∞—á–∞—î—Ç–µ ? (–Ω–∞ –º—ñ—Å—è—Ü—å)", reply_markup=keyboard)
          
          @dp.callback_query_handler(lambda query: query.data in ["11", "25"," 100"])
          async def handle_data(query: types.CallbackQuery):
            await query.answer(cache_time=1)
            user_id = query.from_user.id
            data_mapping = {
    "11": {"DATA_MIN": 0, "DATA_MAX": 10},
    "25": {"DATA_MIN": 10, "DATA_MAX": 25},
    "100": {"DATA_MIN": 25, "DATA_MAX": 100}
            }
            table_name = "table_" + str(user_id)
            data = query.data
            values =data_mapping[data]
            DATA_MIN = values["DATA_MIN"]
            DATA_MAX = values["DATA_MAX"]
            cursor.execute(f"INSERT INTO {table_name} (DATA_MIN) VALUES (?)", (DATA_MIN,))
            cursor.execute(f"INSERT INTO {table_name} (DATA_MAX) VALUES (?)", (DATA_MAX,))
            conn.commit() 
      
            
            keyboard = InlineKeyboardMarkup()
            button_aditionals_option1 = InlineKeyboardButton(text = "SMS 50",callback_data="50")
            button_aditionals_option2 = InlineKeyboardButton(text="SMS 250", callback_data="250")
            button_aditionals_option3 = InlineKeyboardButton(text="‚àû —Å–æ—Ü–º–µ—Ä–µ–∂—ñ", callback_data="5")
            button_aditionals_option4 = InlineKeyboardButton(text="‚àû –æ—Å–≤—ñ—Ç–∞", callback_data="6")
            button_aditionals_option5 = InlineKeyboardButton(text="LIFEBOX", callback_data="7")
            button_aditionals_option6 = InlineKeyboardButton(text="TV+", callback_data="8")
            button_aditionals_option7 = InlineKeyboardButton(text=">5 –Ω–∞ 1 —Ç–∞—Ä–∏—Ñ—ñ", callback_data="9")
            button_aditionals_option8 = InlineKeyboardButton(text="–¥–∞–ª—ñ", callback_data="10")
            keyboard.add(button_aditionals_option1, button_aditionals_option2 )
            keyboard.add(button_aditionals_option3, button_aditionals_option4)
            keyboard.add(button_aditionals_option5,button_aditionals_option6)
            keyboard.add(button_aditionals_option7, button_aditionals_option8)
            await query.message.answer("8. –©–æ –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ —â–µ –¥–æ–¥–∞—Ç–∏ —É —Å–≤—ñ–π —Ç–∞—Ä–∏—Ñ", reply_markup=keyboard)

            @dp.callback_query_handler(lambda query: query.data in ["50", "250", "5", "6", "7", "8", "9"])
            async def handle_aditionals(query: types.CallbackQuery):
              user_id = query.from_user.id
              aditionals_mapping = {
        "50": {"SMS": 50},
        "250": {"SMS": 250},
        "5": {"SOCIAL": 1},
        "6": {"EDUCATIONAL": 1},
        "7": {"LIFEBOX": 250},
        "8": {"TV": 0.5},
        "9": {"FAMILY": 1}
              }
              table_name = "table_" + str(user_id)
              data = query.data
              values = aditionals_mapping[data]
              SMS = values.get("SMS", 0)
              SOCIAL = values.get("SOCIAL", 0)
              EDUCATIONAL = values.get("EDUCATIONAL", 0)
              LIFEBOX = values.get("LIFEBOX", 0)
              TV = values.get("TV", 0)
              FAMILY = values.get("FAMILY", 0)
              cursor.execute(f"INSERT INTO {table_name} (SMS, SOCIAL, EDUCATIONAL, LIFEBOX, TV, FAMILY) VALUES (?, ?, ?, ?, ?, ?)",
                   (SMS, SOCIAL, EDUCATIONAL, LIFEBOX, TV, FAMILY))
              conn.commit() 
              @dp.callback_query_handler(lambda query: query.data=="10")
              async def hendler_go_price(query: types.CallbackQuery):
                await query.message.answer("–î—è–∫—É—é –∑–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å! –í–∞—à –≤–∏–±—ñ—Ä –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –î–∞–ª—ñ - –ø–∏—Ç–∞–Ω–Ω—è —Ü—ñ–Ω–∏")
                keyboard_new = InlineKeyboardMarkup()
                button_price_option1 = InlineKeyboardButton(text = "–¥–æ 120",callback_data="121")
                button_price_option2 = InlineKeyboardButton(text="–¥–æ 250", callback_data="251")
                button_price_option3 = InlineKeyboardButton(text="–≥—Ä–æ—à—ñ –Ω–µ –ø—Ä–æ–±–ª–µ–º–∞", callback_data="501")
                keyboard_new.add(button_price_option1)
                keyboard_new.add(button_price_option2)
                keyboard_new.add(button_price_option3)
                await query.message.answer("9.–Ø–∫–∞ —Ü—ñ–Ω–∞ –±—É–¥–µ –¥–ª—è –≤–∞—Å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—é?", reply_markup=keyboard_new)
            
                @dp.callback_query_handler(lambda query: query.data in ["121", "251", "501"])
                async def handle_price(query: types.CallbackQuery):
                  await query.answer(cache_time=1)
                  user_id = query.from_user.id
                  table_name = "table_" + str(user_id)
                  data = query.data
                  price_mapping={
                    "121": {"PRICE_MIN":75, "PRICE_MAX": 120},
                    "251": {"PRICE_MIN":120, "PRICE_MAX": 250},
                    "501": {"PRICE_MIN":251, "PRICE_MAX": 500},
                  }
                  values = price_mapping[data]
                  PRICE_MIN = values["PRICE_MIN"]
                  PRICE_MAX = values["PRICE_MAX"]
                  cursor.execute(f"UPDATE {table_name} SET PRICE_MIN = ?, PRICE_MAX = ? WHERE user_id = ?", (PRICE_MIN, PRICE_MAX, user_id))
                  conn.commit() 
                
                  await query.message.answer("–î—è–∫—É—é –∑–∞ –ø—Ä–∏—Å–≤—è—á–µ–Ω–∏–π —á–∞—Å.")
                  await query.message.answer("–ó–∞—á–µ–∫–∞–π—Ç–µ –π–¥–µ —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫")
                  user_id = query.from_user.id
                  async def get_table_data(user_id):
                    table_name = "table_" + str(user_id)
                    cursor.execute(f"SELECT * FROM {table_name}")
                    rows = cursor.fetchall()
                    data_array = []
                    for row in rows:
                      data = {
            "user_id": row[0],
            "U_GADGET": row[1],
            "ONNET_MIN": row[2],
            "ONNET_MAX": row[3],
            "OFFNET_MIN": row[4],
            "OFFNET_MAX": row[5],
            "DATA_MIN": row[6],
            "DATA_MAX": row[7],
            "ROAMING": row[8],
            "INTNET": row[9],
            "FAMILY": row[10],
            "SMS": row[11],
            "SOCIAL": row[12],
            "EDUCATIONAL": row[13],
            "TV": row[14],
            "LIFEBOX": row[15],
            "NUMBER_TYPE": row[16],
            "PRICE_MIN": row[17],
            "PRICE_MAX": row[18]
                      }
                    data_array.append(data)
                    return data_array
                    data_array = await get_table_data(user_id)
                    def prepering_user_profile(data_array): ###–¥–∞–ª—ñ –ø—Å–µ–≤–¥–æ–∫–æ–¥ 
                      data_c = {
            "U_GADGET": U_GADGET,
            "ONNET_": 0.5*(data_array["ONNET_MIN"]+data_array["ONNET_MAX"]
            "OFFNET": 0.5*(data_array["ONNET_MIN"]+data_array["ONNET_MAX"]# —Ç–∞–∫ —Å–∞–º–æ –∑ —ñ–Ω—à–∏–º–∏
            "DATA": DATA_MAX,
            "ROAMING": ROAMING,
            "INTNET": INTNET,
            "FAMILY": FAMILY,
            "SMS": SMS,
            "SOCIAL": SOCIAL,
            "EDUCATIONAL": EDUCATIONAL,
            "TV": TV,
            "LIFEBOX": LIFEBOX,
            "NUMBER_TYPE": NUMBER_TYPE,
            "PRICE_MIN": PRICE_MIN,
            "PRICE_MAX": PRICE_MAX
                      }
 

##–¥–∞–ª—ñ –∑–∞ –µ–≤–∫–ª—ñ–¥–æ–≤–∏–º–∏ –≤—ñ–¥—Å—Ç–∞–Ω–Ω—è–º–∏ —Ä–∞—Ö—É—î–º–æ 
def calculate_euclidean_distance(tariff1, tariff2):
    if tariff1.GADGET > 0 or tariff2.GADGET > 0:
        return float('inf')
    
    distance = 0
    for factor in dir(tariff1):
        if not factor.startswith('__') and not callable(getattr(tariff1, factor)) and factor not in ['LINK', 'NAME', 'GADGET']:
            value1 = getattr(tariff1, factor)
            value2 = getattr(tariff2, factor)
            if isinstance(value1, str) and value1:
                value1 = int(value1)
            if isinstance(value2, str) and value2:
                value2 = int(value2)
            distance += (value1 - value2) ** 2
    return math.sqrt(distance)

for tariff in tariffs: distance = calculate_euclidean_distance(U_tariff, tariff) print(f"–í—ñ–¥—Å—Ç–∞–Ω—å –¥–æ —Ç–∞—Ä–∏—Ñ—É '{tariff.NAME}': 
{distance}")
          
                  
                  
            ##—â—Ä –Ω–∞–π–±–ª–∏–∂—á–µ —Ç–µ —ñ —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ      
    



  
            
          
          

          


    



@dp.callback_query_handler(text="business")
async def business_callback(query: types.CallbackQuery):
  await query.answer(cache_time=1) 
  await query.message.answer("–í–∏ –æ–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é '–ë—ñ–∑–Ω–µ—Å'.")
  await query.message.answer("–ù–∞ –∂–∞–ª—å, —è –Ω–µ –≤—Å—Ç–∏–≥ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π–Ω—É —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ü—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞—Ä–∏—Ñ—ñ–≤.\n"
                            "https://www.lifecell.ua/uk/malii-biznes-lifecell/golovna/")






@dp.message_handler()
async def send_message(message: Message, state):
    if message.text == "–ü—Ä–∏–≤—ñ—Ç":
        await bot.send_message(chat_id=message.from_user.id, text="–ü—Ä–∏–≤—ñ—Ç")


if __name__ == '__main__':
    keep_alive()
    executor.start_polling(dp)
